import SwiftUI


extension Color {
    static let smartChefRed = Color(red: 0.85, green: 0.1, blue: 0.1)
    static let smartChefLightGray = Color(UIColor.systemGray6)
}
struct ContentView: View {
    var body: some View {
        NavigationView {
            SignUpView()
        }
    }
}
// MARK: - Authentication Views
struct SignUpView: View {
    @State private var email: String = ""
    @State private var password: String = ""
    @State private var confirmPassword: String = ""
    @State private var isAuthenticated: Bool = false
    @State private var errorMessage: String = ""
    @State private var amountError: String = ""

    var body: some View {
        NavigationStack {
            VStack {
                Text("SMARTCHEF")
                    .font(.largeTitle)
                    .bold()
                    .foregroundColor(.red)
                    .padding(.bottom, 40)
                TextField("Email", text: $email)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()
                SecureField("Password", text: $password)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()
                SecureField("Confirm Password", text: $confirmPassword)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()
                if !errorMessage.isEmpty {
                    Text(errorMessage)
                        .foregroundColor(.red)
                        .padding()
                }
                Button(action: {
                    authenticateUser()
                }) {
                    Text("Sign up")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.red)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .padding(.horizontal)
                }
                NavigationLink("Already have an account? Sign in", destination: SignInView())
                    .padding()
                NavigationLink("", destination: HomeView(), isActive: $isAuthenticated)
            }
            .padding()
        }
    }
    func authenticateUser() {
        if !isValidEmail(email) {
            errorMessage = "Invalid email. It must contain '@'."
        } else if !isValidPassword(password) {
            errorMessage = "Password must be at least 8 characters and contain a number."
        } else if password != confirmPassword {
            errorMessage = "Passwords do not match."
        } else {
            isAuthenticated = true
        }
    }
}
struct SignInView: View {
    @State private var email: String = ""
    @State private var password: String = ""
    @State private var isAuthenticated: Bool = false
    @State private var errorMessage: String = ""
    var body: some View {
        NavigationStack {
            VStack {
                Text("SMARTCHEF")
                    .font(.largeTitle)
                    .bold()
                    .foregroundColor(.red)
                    .padding(.bottom, 40)
                TextField("Email", text: $email)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()
                SecureField("Password", text: $password)
                    .textFieldStyle(RoundedBorderTextFieldStyle())
                    .padding()
                if !errorMessage.isEmpty {
                    Text(errorMessage)
                        .foregroundColor(.red)
                        .padding()
                }
                Button(action: {
                    authenticateUser()
                }) {
                    Text("Sign in")
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.red)
                        .foregroundColor(.white)
                        .cornerRadius(10)
                        .padding(.horizontal)
                }
                NavigationLink("Forgot your password? Reset", destination: ResetPasswordView())
                    .padding()
                NavigationLink("", destination: HomeView(), isActive: $isAuthenticated)
            }
            .padding()
        }
    }
    func authenticateUser() {
        if isValidEmail(email) && isValidPassword(password) {
            isAuthenticated = true
        } else {
            errorMessage = "Invalid email or password. Email must contain '@'. Password must be at least 8 characters and contain a number."
        }
    }
}
func isValidEmail(_ email: String) -> Bool {
    return email.contains("@")
}
func isValidPassword(_ password: String) -> Bool {
    return password.count >= 8 && password.rangeOfCharacter(from: .decimalDigits) != nil
}
// MARK: - Home Tab View
struct HomeView: View {
    var body: some View {
        MainTabView()
    }
}
struct MainTabView: View {
    var body: some View {
        TabView {
            CommunityView()
                .tabItem {
                    Image(systemName: "person.3.fill")
                    Text("Community")
                }
            ChatGPTPromptView()
                .tabItem {
                    Image(systemName: "plus.circle")
                    Text("Create")
                }
            ProfileView()
                .tabItem {
                    Image(systemName: "person.crop.circle")
                    Text("Profile")
                }
        }
    }
}
// MARK: - Recipe Model & Detail View
struct Recipe: Identifiable {
    let id = UUID()
    let title: String
    let imageName: String
    let calories: Int
    let description: String
    let ingredients: String
    let allergies: [String]
    let measurements: String
    let steps: [String]
}

struct RecipeDetailView: View {
    let recipe: Recipe
    @State private var showSteps = false

    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                Image(recipe.imageName)
                    .resizable()
                    .scaledToFit()
                    .frame(height: 200)
                    .clipShape(RoundedRectangle(cornerRadius: 16))

                Text(recipe.title)
                    .font(.title2)
                    .bold()

                Text("\(recipe.calories) kcal")
                    .foregroundColor(.smartChefRed)
                    .font(.headline)

                VStack(alignment: .leading, spacing: 10) {
                    Text("Details")
                        .font(.headline)
                    Text(recipe.description)
                        .font(.subheadline)
                        .foregroundColor(.gray)

                    Text("Ingredients")
                        .font(.headline)
                    Text(recipe.ingredients)
                        .font(.subheadline)

                    Text("Measurements")
                        .font(.headline)
                    Text(recipe.measurements)
                        .font(.subheadline)

                    DisclosureGroup("Steps", isExpanded: $showSteps) {
                        VStack(alignment: .leading, spacing: 8) {
                            ForEach(recipe.steps.indices, id: \ .self) { index in
                                Text("\(index + 1). \(recipe.steps[index])")
                                    .font(.subheadline)
                            }
                        }
                        .padding(.top, 4)
                    }
                    .font(.headline)

                    if !recipe.allergies.isEmpty {
                        Text("Allergies")
                            .font(.headline)
                            .foregroundColor(.red)
                        Text(recipe.allergies.joined(separator: ", "))
                            .font(.subheadline)
                            .foregroundColor(.red)
                    }
                }
                .padding(.horizontal)

                Button(action: {}) {
                    Text("Add to favorites")
                        .font(.headline)
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.smartChefRed)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                        .padding(.horizontal)
                }
                .padding(.bottom)
            }
            .padding()
        }
        .navigationTitle("")
        .navigationBarTitleDisplayMode(.inline)
    }
}

// MARK: - Community View
struct CommunityView: View {
    @State private var showAddRecipe = false

    let recipes = [
        Recipe(title: "Veggie tomato mix", imageName: "veggie_tomato", calories: 320, description: "A mix of vegetables perfect for any evening snack.", ingredients: "Vegetables, tomatoes", allergies: ["Tomatoes"], measurements: "1 cup chopped veggies, 2 tomatoes", steps: ["Wash and chop all vegetables.", "Heat pan and sauté vegetables for 5–7 minutes.", "Add tomatoes and cook for another 3 minutes.", "Serve warm."]),
        Recipe(title: "Egg and cucumber", imageName: "egg_cucumber", calories: 290, description: "Light and healthy meal with boiled eggs and cucumbers.", ingredients: "Eggs, cucumber", allergies: ["Eggs"], measurements: "2 eggs, 1 cucumber sliced", steps: ["Boil eggs for 10 minutes.", "Peel and slice eggs.", "Serve with sliced cucumber and a pinch of salt."]),
        Recipe(title: "Fried chicken mix", imageName: "fried_chicken", calories: 450, description: "Crispy fried chicken with a mix of spices.", ingredients: "Chicken, spices", allergies: ["Spices"], measurements: "500g chicken, 1 tsp each of paprika, garlic, salt", steps: ["Season chicken with spices.", "Heat oil in pan.", "Fry chicken until golden and crispy.", "Drain and serve."]),
        Recipe(title: "Moi-moi and ekpa", imageName: "moi_moi_ekpa", calories: 400, description: "Classic Nigerian dish with beans and oil.", ingredients: "Beans, oil", allergies: ["None"], measurements: "1 cup blended beans, 2 tbsp red palm oil", steps: ["Mix blended beans with oil and seasonings.", "Pour into containers and steam for 45 minutes.", "Serve with plantains or rice."]),
        Recipe(title: "Grilled veggie wrap", imageName: "veggie_wrap", calories: 270, description: "Grilled wrap with seasonal vegetables.", ingredients: "Tortilla, veggies", allergies: ["Gluten"], measurements: "1 tortilla, 1 cup mixed veggies", steps: ["Grill vegetables until tender.", "Warm tortilla and place veggies inside.", "Wrap tightly and serve."]),
        Recipe(title: "Avocado toast", imageName: "avocado_toast", calories: 250, description: "Toasted bread topped with mashed avocado.", ingredients: "Bread, avocado", allergies: ["Gluten"], measurements: "2 slices bread, 1 ripe avocado", steps: ["Toast bread slices.", "Mash avocado with lemon and salt.", "Spread on toast and enjoy."])
    ]

    var body: some View {
        NavigationStack {
            VStack(alignment: .leading) {
                HStack {
                    Text("Community")
                        .font(.largeTitle)
                        .bold()
                        .foregroundColor(.smartChefRed)

                    Spacer()

                    Button(action: {
                        showAddRecipe = true
                    }) {
                        Image(systemName: "plus")
                            .font(.title2)
                            .padding(8)
                            .background(Color.smartChefRed)
                            .foregroundColor(.white)
                            .clipShape(Circle())
                    }
                    .padding(.trailing)
                }
                .padding([.top, .leading])

                Text("Total \(recipes.count) results")
                    .font(.headline)
                    .padding(.horizontal)
                    .padding(.bottom, 5)

                ScrollView {
                    LazyVGrid(columns: [
                        GridItem(.flexible()),
                        GridItem(.flexible())
                    ], spacing: 20) {
                        ForEach(recipes) { recipe in
                            NavigationLink(destination: RecipeDetailView(recipe: recipe)) {
                                VStack(spacing: 10) {
                                    ZStack {
                                        RoundedRectangle(cornerRadius: 20)
                                            .fill(Color.white)
                                            .shadow(radius: 4)

                                        VStack(spacing: 10) {
                                            Image(recipe.imageName)
                                                .resizable()
                                                .scaledToFit()
                                                .frame(height: 80)
                                                .clipShape(RoundedRectangle(cornerRadius: 10))

                                            Text(recipe.title)
                                                .font(.headline)
                                                .multilineTextAlignment(.center)
                                                .foregroundColor(.black)

                                            Text("\(recipe.calories) kcal")
                                                .font(.subheadline)
                                                .foregroundColor(.smartChefRed)

                                            if !recipe.allergies.isEmpty {
                                                Text("Allergies: \(recipe.allergies.joined(separator: ", "))")
                                                    .font(.caption)
                                                    .foregroundColor(.red)
                                            }
                                        }
                                        .padding()
                                    }
                                    .frame(height: 220)
                                }
                            }
                        }
                    }
                    .padding(.horizontal)
                }
            }
            .sheet(isPresented: $showAddRecipe) {
                Text("Share a new recipe (Coming soon)")
                    .font(.title)
                    .padding()
            }
        }
    }
}



struct CreateRecipeView: View {
    @State private var navigateToPrompt = false

    var body: some View {
        VStack(spacing: 20) {
            Text("Create or View Recipes")
                .font(.title)
                .bold()
                .foregroundColor(.smartChefRed)
                .padding(.top)

            Button(action: {
                navigateToPrompt = true
            }) {
                Text("Create New Recipe")
                    .font(.headline)
                    .frame(maxWidth: .infinity)
                    .padding()
                    .background(Color.smartChefRed)
                    .foregroundColor(.white)
                    .cornerRadius(12)
                    .padding(.horizontal)
            }

            Button("View Previous Recipes") {
                // TODO: Navigate to previous recipes view
            }
            .font(.headline)
            .frame(maxWidth: .infinity)
            .padding()
            .background(Color.smartChefRed)
            .foregroundColor(.white)
            .cornerRadius(12)
            .padding(.horizontal)

            Spacer()
        }
        .navigationDestination(isPresented: $navigateToPrompt) {
            ChatGPTPromptView()
        }
    }
}

struct ChatGPTPromptView: View {
    
    @State private var ingredients: [IngredientEntry] = [IngredientEntry()]
    @State private var generatedRecipe: String = ""
    @State private var isLoading = false
    @State private var dietType: String = "Any"
    @State private var previousRecipes: [String] = []
    
    let dietOptions = ["Any", "Low Carbs", "High Carbs", "High Protein", "Low Calories", "High Calories"]
    let units = ["g", "ml", "oz", "Pc"]

    var body: some View {
        
        NavigationStack {
            ScrollView {
                VStack(spacing: 20) {
                    Text("Create or View Recipes")
                        .font(.title)
                        .bold()
                        .foregroundColor(.smartChefRed)
                        .padding(.top)
                    HStack {
                        Text("Ingredients")
                            .frame(maxWidth: .infinity, alignment: .leading)
                        Text("Amount")
                            .frame(width: 70)
                        Text("Unit")
                            .frame(width: 60)
                    }
                    .font(.headline)
                    .padding(.horizontal)

                   
                    ForEach(ingredients.indices, id: \.self) { index in
                        HStack(spacing: 10) {
                            TextField("Ingredient", text: $ingredients[index].name)
                                .textFieldStyle(RoundedBorderTextFieldStyle())
                                .autocapitalization(.words)
                                .onChange(of: ingredients[index].name) { newValue in
                                    ingredients[index].name = newValue.filter { $0.isLetter || $0.isWhitespace }
                                    
                                    if !newValue.isEmpty && index == ingredients.count - 1 {
                                        // 🛠 Immediately add new row
                                        ingredients.append(IngredientEntry())
                                    }
                                }
                                .onSubmit {
                                    DispatchQueue.main.async {
                                        cleanEmptyRows()
                                    }
                                }

                            
                            
                            VStack(alignment: .leading, spacing: 4) {
                                TextField("Amount", text: $ingredients[index].amount)
                                    .textFieldStyle(RoundedBorderTextFieldStyle())
                                    .padding()
                                    .keyboardType(.numberPad)
                                    .frame(width: 60)
                                    .onChange(of: ingredients[index].amount) { newValue in
                                        ingredients[index].amount = newValue.filter { $0.isNumber }
                                        if ingredients[index].amount.count > 4 {
                                            ingredients[index].amount = String(ingredients[index].amount.prefix(4))
                                        }
                                        // Validate amount immediately
                                        if ingredients[index].amount.isEmpty || ingredients[index].amount == "0" {
                                            ingredients[index].amountError = " Enter a valid amount❗"
                                        } else {
                                            ingredients[index].amountError = ""
                                        }
                                    }
                                
                                if !ingredients[index].amountError.isEmpty {
                                    Text(ingredients[index].amountError)
                                        .font(.caption)
                                        .foregroundColor(.red)
                                }
                            }


                                
                            Menu {
                                ForEach(units, id: \.self) { unit in
                                    Button(unit) {
                                        ingredients[index].unit = unit
                                    }
                                }
                            } label: {
                                HStack {
                                    Text(ingredients[index].unit.isEmpty ? "Unit" : ingredients[index].unit)
                                    Image(systemName: "chevron.down")
                                }
                                .frame(width: 60)
                                .padding(8)
                                .background(Color.smartChefLightGray)
                                .cornerRadius(8)
                            }
                        }
                        .padding(.horizontal)
                    }




                    // Diet Type Selection
                    Menu {
                        ForEach(dietOptions, id: \.self) { option in
                            Button(option) {
                                dietType = option
                            }
                        }
                    } label: {
                        HStack {
                            Text("Diet: \(dietType)")
                            Image(systemName: "chevron.down")
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(Color.smartChefLightGray)
                        .cornerRadius(12)
                        .padding(.horizontal)
                    }

                    // Generate Button
                    Button(action: {
                        generateRecipe()
                    }) {
                        HStack {
                            if isLoading {
                                ProgressView()
                                    .progressViewStyle(CircularProgressViewStyle(tint: .white))
                            } else {
                                Text("Generate Recipe!")
                                    .font(.headline)
                            }
                        }
                        .frame(maxWidth: .infinity)
                        .padding()
                        .background(isLoading ? Color.gray : Color.smartChefRed)
                        .foregroundColor(.white)
                        .cornerRadius(12)
                        .padding(.horizontal)
                    }
                    .disabled(isLoading || ingredients.filter { !$0.name.isEmpty }.isEmpty)

                    // Generated Recipe Display
                    if !generatedRecipe.isEmpty {
                        ScrollView {
                            Text(generatedRecipe)
                                .padding()
                                .background(Color.smartChefLightGray)
                                .cornerRadius(12)
                                .padding()
                        }
                    }

                    // View Previous Recipes
                    NavigationLink(destination: ViewPreviousRecipes(recipes: previousRecipes)) {
                        Text("View Previous Recipes")
                            .font(.headline)
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.smartChefRed)
                            .foregroundColor(.white)
                            .cornerRadius(12)
                            .padding(.horizontal)
                    }
                }
                .padding(.top)
            }
            .background(Color.white)
            .ignoresSafeArea(.keyboard, edges: .bottom)
        }
    }

    // MARK: - Helper Functions

    func cleanEmptyRows() {
        ingredients = ingredients.enumerated().filter { index, ingredient in
            index == 0 || !ingredient.name.isEmpty
        }.map { $0.element }
    }

    func generateRecipe() {
        isLoading = true

        let filledIngredients = ingredients.filter { !$0.name.isEmpty }

        let formattedIngredients = filledIngredients
            .map { "\($0.amount) \($0.unit) \($0.name)" }
            .joined(separator: ", ")

        let prompt = """
        Validate if the following are real ingredients: \(formattedIngredients).
        Then create a \(dietType) recipe using these ingredients.
        Provide detailed cooking instructions and include macros (Calories, Proteins, Carbs, Fats). Mention that the macros are approximate.
        """

        ChatGPTService.shared.generateRecipe(prompt: prompt) { response in
            DispatchQueue.main.async {
                if let recipe = response {
                    self.generatedRecipe = recipe
                    self.previousRecipes.append(recipe)
                } else {
                    self.generatedRecipe = "Failed to generate recipe."
                }
                self.isLoading = false
            }
        }
    }
}

// Support structs

struct IngredientEntry: Identifiable, Equatable {
    var id = UUID()
    var name: String = ""
    var amount: String = ""
    var unit: String = ""
    var amountError: String = ""

}

struct ViewPreviousRecipes: View {
    let recipes: [String]

    var body: some View {
        ScrollView {
            VStack(spacing: 20) {
                Text("Previous Recipes")
                    .font(.largeTitle)
                    .bold()
                    .foregroundColor(.smartChefRed)
                    .padding()

                if recipes.isEmpty {
                    Text("No previous recipes yet.")
                        .foregroundColor(.gray)
                        .padding()
                } else {
                    ForEach(recipes, id: \.self) { recipe in
                        VStack(alignment: .leading, spacing: 10) {
                            Text(recipe)
                                .padding()
                                .background(Color.smartChefLightGray)
                                .cornerRadius(12)
                        }
                        .padding(.horizontal)
                    }
                }
            }
            .padding(.top)
        }
    }
}


    
    

    ;struct ProfileView: View {
        @State private var navigateTo: String? = nil
        @Environment(\.presentationMode) var presentationMode
        
        var body: some View {
            NavigationStack {
                VStack(spacing: 20) {
                    
                    // Profile Header
                    VStack(spacing: 8) {
                        Spacer().frame(height:50)
                        Image(systemName: "person.crop.circle")
                            .resizable()
                            .frame(width: 80, height: 80)
                            .foregroundColor(.smartChefRed)
                        
                        Text("JOHN DOE")
                            .font(.title2)
                            .bold()
                            .foregroundColor(.black)
                    }
                    .padding(.top, 20)
                    
                    // Options List
                    VStack(spacing: 16) {
                        Button(action: { navigateTo = "EditProfile" }) {
                            ProfileRow(icon: "person", title: "Edit Profile")
                        }
                        Button(action: { navigateTo = "Favorites" }) {
                            ProfileRow(icon: "clock", title: "Favorites")
                        }
                        Button(action: { navigateTo = "MyPosts" }) {
                            ProfileRow(icon: "doc.text", title: "My Posts")
                        }
                        
                        Divider().padding(.vertical, 8)
                        
                        Button(action: { navigateTo = "Help" }) {
                            ProfileRow(icon: "questionmark.circle", title: "Help")
                        }
                        Button(action: { navigateTo = "Settings" }) {
                            ProfileRow(icon: "gearshape", title: "Settings")
                        }
                        Button(action: { navigateTo = "Terms" }) {
                            ProfileRow(icon: "doc.plaintext", title: "Terms and Conditions")
                        }
                        
                        Divider().padding(.vertical, 8)
                        
                        Button(action: {
                            // Perform logout here
                            navigateTo = "Logout"
                        }) {
                            HStack {
                                Image(systemName: "arrowshape.turn.up.left")
                                    .foregroundColor(.smartChefRed)
                                Text("Log Out")
                                    .foregroundColor(.smartChefRed)
                                    .fontWeight(.bold)
                            }
                            .frame(maxWidth: .infinity, alignment: .leading)
                            .padding()
                            .background(Color.smartChefLightGray)
                            .cornerRadius(12)
                            .padding(.horizontal)
                        }
                    }
                    Spacer()
                    
                    NavigationLink(destination: EditProfileView(), tag: "EditProfile", selection: $navigateTo) { EmptyView() }
                    NavigationLink(destination: FavoritesView(), tag: "Favorites", selection: $navigateTo) { EmptyView() }
                    NavigationLink(destination: MyPostsView(), tag: "MyPosts", selection: $navigateTo) { EmptyView() }
                    NavigationLink(destination: HelpView(), tag: "Help", selection: $navigateTo) { EmptyView() }
                    NavigationLink(destination: SettingsView(), tag: "Settings", selection: $navigateTo) { EmptyView() }
                    NavigationLink(destination: TermsAndConditionsView(), tag: "Terms", selection: $navigateTo) { EmptyView() }
                    NavigationLink(destination: SignInView(), tag: "Logout", selection: $navigateTo) { EmptyView() }
                }
                .navigationTitle("Profile")
                .navigationBarTitleDisplayMode(.inline)
                .background(Color.white.edgesIgnoringSafeArea(.all))
            }
        }
    }
    
    struct ProfileRow: View {
        var icon: String
        var title: String
        
        var body: some View {
            HStack(spacing: 12) {
                Image(systemName: icon)
                    .foregroundColor(.smartChefRed)
                    .frame(width: 24, height: 24)
                Text(title)
                    .foregroundColor(.black)
                Spacer()
            }
            .padding()
            .background(Color.smartChefLightGray)
            .cornerRadius(12)
            .padding(.horizontal)
        }
    }
    
    // MARK: - Placeholder Views
    struct EditProfileView: View {
        var body: some View {
            Text("Edit Profile Screen")
                .font(.largeTitle)
                .padding()
        }
    }
    
    struct FavoritesView: View {
        var body: some View {
            Text("Favorites Screen")
                .font(.largeTitle)
                .padding()
        }
    }
    
    struct MyPostsView: View {
        var body: some View {
            Text("My Posts Screen")
                .font(.largeTitle)
                .padding()
        }
    }
    
    struct HelpView: View {
        var body: some View {
            Text("Help Screen")
                .font(.largeTitle)
                .padding()
        }
    }
    
    struct SettingsView: View {
        var body: some View {
            Text("Settings Screen")
                .font(.largeTitle)
                .padding()
        }
    }
    
    struct TermsAndConditionsView: View {
        var body: some View {
            Text("Terms and Conditions Screen")
                .font(.largeTitle)
                .padding()
        }
    }
    
    
    
    
    
    // MARK: - Password Reset & Confirmation
    struct ResetPasswordView: View {
        @State private var email: String = ""
        @State private var isEmailValid: Bool = false
        @State private var errorMessage: String = ""
        var body: some View {
            NavigationStack {
                VStack {
                    Text("SMARTCHEF")
                        .font(.largeTitle)
                        .bold()
                        .foregroundColor(.red)
                        .padding(.bottom, 40)
                    TextField("Enter your email", text: $email)
                        .textFieldStyle(RoundedBorderTextFieldStyle())
                        .padding()
                    if !errorMessage.isEmpty {
                        Text(errorMessage)
                            .foregroundColor(.red)
                            .padding()
                    }
                    Button(action: {
                        validateEmail()
                    }) {
                        Text("Send Reset Email")
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.red)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                            .padding(.horizontal)
                    }
                    NavigationLink("", destination: ConfirmationView(), isActive: $isEmailValid)
                }
                .padding()
            }
        }
        func validateEmail() {
            if isValidEmail(email) {
                isEmailValid = true
            } else {
                errorMessage = "Invalid email format. Please enter a valid email."
            }
        }
    }
    struct ConfirmationView: View {
        var body: some View {
            NavigationStack {
                VStack {
                    Text("SMARTCHEF")
                        .font(.largeTitle)
                        .bold()
                        .foregroundColor(.red)
                        .padding()
                    Text("The Email has been sent!")
                        .multilineTextAlignment(.center)
                        .padding()
                    Image(systemName: "checkmark.circle.fill")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 100, height: 100)
                        .foregroundColor(.red)
                        .padding()
                    NavigationLink(destination: SignInView()) {
                        Text("Sign in")
                            .frame(maxWidth: .infinity)
                            .padding()
                            .background(Color.red)
                            .foregroundColor(.white)
                            .cornerRadius(10)
                            .padding(.horizontal)
                    }
                }
                .padding()
            }
        }
    }
    // MARK: - Preview
    #Preview {
        ContentView()
    }
    
    
    
    
    
    
    

